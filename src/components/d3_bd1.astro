<!-- Create a div where the graph will take place -->
<div id="my_dataviz_container">
  <div id="my_dataviz"></div>
  <div id="slider-range"></div>
</div>

<!-- Load d3.js -->
<script is:inline src="https://d3js.org/d3.v7.min.js"></script>
<script is:inline src="https://unpkg.com/d3-simple-slider"></script>
<style>
  /* Styles for the main chart container */
  #my_dataviz_container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #fff;
    border-radius: 12px; /* Rounded corners for the container */
    width: 100%; /* Make it fluid */
    max-width: 600px; /* Max width for desktop */
  }

  /* SVG element styling */
  #my_dataviz svg {
    display: block; /* Remove extra space below SVG */
    margin: 0 auto; /* Center SVG within its div */
  }

  /* Styling for axis text */
  .axis text {
    font-size: 13px;
    fill: #555;
  }

  /* Styling for the chart title */
  .chart-title {
    font-size: 22px; /* Slightly larger title */
    font-weight: 600; /* Medium bold */
    text-anchor: middle;
    fill: #333;
    white-space: pre-wrap; /* Allow text wrapping for long titles */
    text-align: center;
  }

  /* Styles for the D3 Simple Slider ticks and labels */
  .d3-slider .d3-slider-tick text {
    font-size: 12px;
    fill: #555;
  }
  .d3-slider .d3-slider-range {
    fill: #4c8bf5; /* Blue fill for the slider range */
  }
  .d3-slider .d3-slider-handle {
    border: 2px solid #4c8bf5; /* Blue border for slider handles */
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  }
</style>
<script>
  // @ts-ignore
  declare const d3: any;

  /**
   * @param {any} d
   */
  function convertRow(d: any) {
    return {
      year: parseInt(d.year),
      month: parseInt(d.month),
      day: parseInt(d.day),
      births: parseInt(d.births),
      //weekday: parseInt(d.weekday),
    };
  }

  /**
   * @param {Array<{year:number, month:number, day:number, births:number}>} data
   * @param {number} [startYear]
   * @param {number} [endYear]
   */
  function groupBirths(
    data: Array<{ year: number; month: number; day: number; births: number }>,
    startYear = 1907,
    endYear = 2003,
  ) {
    // 1. First, filter the data by the specified year range
    const filteredData = data.filter((record: { year: number }) => {
      return record.year >= startYear && record.year <= endYear;
    });

    // 2. Now, apply the grouping logic to the filtered data
    /** @type {Record<string, {month:number, day:number, births:number}>} */
    const groupedData: {
      [key: string]: { month: number; day: number; births: number };
    } = {};
    filteredData.forEach(
      (record: { month: number; day: number; births: number }) => {
        const key = `${record.month}-${record.day}`;
        if (!groupedData[key]) {
          groupedData[key] = {
            month: record.month,
            day: record.day,
            births: 0,
          };
        }
        groupedData[key].births += record.births;
      },
    );
    // 3. Convert the groupedData object back into a sorted array of objects
    const result = Object.values(groupedData);
    result.sort(
      (
        a: { month: number; day: number },
        b: { month: number; day: number },
      ) => {
        if (a.month !== b.month) {
          return a.month - b.month;
        }
        return a.day - b.day;
      },
    );
    return result;
  }

  // set the dimensions and margins of the graph
  const margin = { top: 80, right: 25, bottom: 30, left: 40 },
    width = 500 - margin.left - margin.right,
    height = 800 - margin.top - margin.bottom;

  // append the svg object to the body of the page
  // @ts-ignore
  var svg = d3
    .select("#my_dataviz")
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", `translate(${margin.left},${margin.top})`);

  //Read the data
  // @ts-ignore
  d3.csv(
    "https://raw.githubusercontent.com/khchtr/OpenData/refs/heads/main/Demographics/birthdays.csv",
    convertRow,
  ).then(function (source_data: any) {
    let data = groupBirths(source_data);

    // Labels of row and columns -> unique identifier of the column called 'group' and 'variable'
    //const months = Array.from(new Set(data.map(d => d.month)))
    //const days = Array.from(new Set(data.map(d => d.day)))

    // Build X scales and axis:
    // @ts-ignore
    const x = d3
      .scaleBand()
      .range([0, width])
      .domain(Array.from({ length: 12 }, (_, i) => i + 1))
      .padding(0.05);

    // @ts-ignore
    const xAxis = svg
      .append("g")
      .style("font-size", 15)
      .attr("transform", "translate(0,-5)")
      .call(
        // @ts-ignore
        d3
          .axisTop(x)
          .tickSize(0)
          .tickFormat((d: number) => {
            // Changed to axisTop
            const date = new Date(2000, d - 1, 1); // Use a dummy date to get month name
            // @ts-ignore
            return d3.timeFormat("%b")(date); // Format to abbreviated month name (e.g., "Jan")
          }),
      );
    xAxis.select(".domain").remove();

    // Build Y scales and axis:
    // @ts-ignore
    const y = d3
      .scaleBand()
      .range([height, 0])
      .domain(Array.from({ length: 31 }, (_, i) => 31 - i))
      .padding(0.05);

    // @ts-ignore
    const yAxis = svg.append("g").style("font-size", 15).call(
      // @ts-ignore
      d3.axisLeft(y).tickSize(0),
    );
    yAxis.select(".domain").remove();

    // d3.min(data, (d: any) => d.births)
    // @ts-ignore
    let myColor = d3
      .scaleDiverging()
      .domain([
        d3.min(data, (d: any) => d.births),
        d3.mean(data, (d: any) => d.births),
        d3.max(data, (d: any) => d.births),
      ])
      .range(["blue", "white", "red"]);

    // @ts-ignore

    // add the squares
    // @ts-ignore
    svg
      .selectAll()
      .data(data, function (d: any) {
        return d.month + ":" + d.day;
      })
      .join("rect")
      .attr("x", function (d: any) {
        return x(d.month);
      })
      .attr("y", function (d: any) {
        return y(d.day);
      })
      .attr("rx", 0)
      .attr("ry", 0)
      .attr("width", x.bandwidth())
      .attr("height", y.bandwidth())
      .style("fill", (d: any) => myColor(d.births))
      .style("stroke-width", 4)
      .style("stroke", "none")
      .style("opacity", 0.8);

    // @ts-ignore
    var cell = svg
      .selectAll(".label")
      .data(data)
      .enter()
      .append("g")
      .attr("class", "label");

    cell
      .append("text")
      .attr("x", (d: any) => x(d.month))
      .attr("y", (d: any) => y(d.day))
      .attr("dx", x.bandwidth() / 2)
      .attr("dy", y.bandwidth() / 2)
      .attr("text-anchor", "middle")
      .style("font-size", "16px")
      .style("fill", "black")
      .style("dominant-baseline", "middle")
      .text((d: any) => Math.round((d.births / 1000) * 10) / 10);

    cell
      .append("title")
      .text((d: any) => `${d.births.toLocaleString("en")} births`);

    // Define the slider

    let min = 1907;
    let max = 2003;
    // @ts-ignore
    var sliderRange = d3
      .sliderBottom()
      .min(min)
      .max(max)
      .width(300)
      .step(1)
      .ticks(5)
      .default([min, max])
      .fill("#5148ff")
      .displayFormat(d3.format(".0f"))
      .tickFormat(d3.format(".0f"));
    //d3.select('p#value-range').text(val.map(d3.format('.2%')).join('-'))
    //To be changed Filter data based on slider values
    // const filteredData = data.filter(d => d.Date >= val[0] && d.Date <= val[1]);

    sliderRange.on("onchange", (val: [number, number]) => {
      let data_new = groupBirths(source_data, val[0], val[1]);
      // @ts-ignore
      let min = d3.min(data_new, (d: any) => d.births);
      // @ts-ignore
      let max = d3.max(data_new, (d: any) => d.births);
      let mean = d3.mean(data_new, (d: any) => d.births);

      myColor.domain([min, mean, max]);

      // @ts-ignore
      svg
        .selectAll("rect")
        .data(data_new, function (d: any) {
          return d.month + ":" + d.day;
        })
        .style("fill", function (d: any) {
          return myColor(d.births);
        });

      // @ts-ignore
      var cell = svg.selectAll(".label").data(data_new);

      cell
        .select("text")
        .text((d: any) => Math.round((d.births / 1000) * 10) / 10);

      cell
        .select("title")
        .text((d: any) => `${d.births.toLocaleString("en")} births`);
    });

    // Add the slider to the DOM
    // @ts-ignore
    var gRange = d3
      .select("div#slider-range")
      .append("svg")
      .attr("width", 500)
      .attr("height", 100)
      .append("g")
      .attr("transform", "translate(90,10)");

    gRange.call(sliderRange);

    // Add title to graph
    svg
      .append("text")
      .attr("x", 0)
      .attr("y", -30)
      .attr("class", "chart-title")
      .attr("text-anchor", "left")
      .text("Number of births in Armenia (thousands)");
  });
</script>
